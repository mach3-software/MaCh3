@PACKAGE_INIT@

set(MaCh3_VERSION @PROJECT_VERSION@)

LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/../../../cmake)

set(CPU_ONLY @CPU_ONLY@)
set(DEBUG_LEVEL @DEBUG_LEVEL@)
set(MaCh3_DEBUG_ENABLED @MaCh3_DEBUG_ENABLED@)
set(MaCh3_MULTITHREAD_ENABLED @MaCh3_MULTITHREAD_ENABLED@)
set(MaCh3_GPU_ENABLED @MaCh3_GPU_ENABLED@)
set(MaCh3_PYTHON_ENABLED @MaCh3_PYTHON_ENABLED@)
set(MaCh3_MINUIT2_ENABLED @MaCh3_MINUIT2_ENABLED@)

get_filename_component(MaCh3_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
list(APPEND CMAKE_MODULE_PATH "${MaCh3_CMAKE_DIR}")
list(APPEND CMAKE_MODULE_PATH "${MaCh3_CMAKE_DIR}/cmake")

enable_language(CXX)

set(MaCh3_FOUND TRUE)

include(ROOT)

if(NOT TARGET ROOT::ROOT)
  cmessage(WARNING "Expected MaCh3 to set up dependency target: ROOT::ROOT")
  set(MaCh3_FOUND FALSE)
  return()
endif()

#Fancy NuOscillator
find_package(NuOscillator @NUOSCILLATOR_VERSION@ REQUIRED)

#We use spdlog so find all it's dependencies
find_package(spdlog @spdlog_VERSION@ REQUIRED)

if(NOT TARGET spdlog::spdlog)
  cmessage(FATAL_ERROR "Didn't set up spdlog::spdlog")
endif()

if(MaCh3_GPU_ENABLED)
  enable_language(CUDA)
  add_compile_definitions(CUDA)
  #KS: Maybe just include CUDASetup.cmake or make cmake more robust rather than copy paste?
  find_package(CUDAToolkit)
  set(CUDA_ARCHITECTURES @CUDA_ARCHITECTURES@)
endif()

include(${CMAKE_CURRENT_LIST_DIR}/MaCh3Targets.cmake)

if(NOT TARGET MaCh3::All)
  cmessage(FATAL_ERROR "Didn't set up MaCh3::All")
endif()

get_filename_component(MaCh3_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)


find_path(MaCh3_INCLUDE_DIR
  NAMES mcmc/FitterBase.h
  PATHS ${MaCh3_CMAKE_DIR}/include/
)

find_path(MaCh3_LIB_DIR
  NAMES libMCMC.so
  PATHS ${MaCh3_CMAKE_DIR}/lib/
)

find_path(MaCh3_PREFIX
  NAMES bin/setup.MaCh3.sh
  PATHS ${MaCh3_CMAKE_DIR}/
)

cmessage(STATUS "MaCh3_LIB_DIR: ${MaCh3_LIB_DIR}")
cmessage(STATUS "MaCh3_INCLUDE_DIR: ${MaCh3_INCLUDE_DIR}")
cmessage(STATUS "MaCh3_PREFIX: ${MaCh3_PREFIX}")
cmessage(STATUS "MaCh3_VERSION: ${MaCh3_VERSION}")

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(MaCh3
    REQUIRED_VARS
      MaCh3_INCLUDE_DIR
      MaCh3_LIB_DIR
      MaCh3_PREFIX
    VERSION_VAR
      MaCh3_VERSION
)
